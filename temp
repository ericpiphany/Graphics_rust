static aspect_ratio: f64 = 16.0 / 9.0;
static image_width: i32 = 1000;
static mut image_height: i32 = (image_width as f64 / aspect_ratio as f64) as i32;

//Camera
static focal_length: f64 = 1.2;
static viewport_height: f64 = 2.0;
static viewport_width: f64 = viewport_height * aspect_ratio; // (image_width as f64 / unsafe { image_height as f64 }) as f64;
static camera_centre: Vec3 = Vec3 {
    x: 0.0,
    y: 0.0,
    z: 0.0,
};
//Vectors at viewport edges
static viewport_u: Vec3 = Vec3 {
    x: viewport_width,
    y: 0.0,
    z: 0.0,
};
static viewport_v: Vec3 = Vec3 {
    x: 0.0,
    y: -viewport_width,
    z: 0.0,
};

static mut pixel_delta_u: vec3::Vec3 = Vec3 {
    x: 0.0,
    y: 0.0,
    z: 0.0,
};
static mut pixel_delta_v: vec3::Vec3 = Vec3 {
    x: 0.0,
    y: 0.0,
    z: 0.0,
};
static mut viewport_upper_left: vec3::Vec3 = Vec3 {
    x: 0.0,
    y: 0.0,
    z: 0.0,
};
static mut pixel00_loci: vec3::Vec3 = Vec3 {
    x: 0.0,
    y: 0.0,
    z: 0.0,
};
static mut WORLD: HittableList = HittableList {
    objects: Vec::new(),
};
unsafe {
    WORLD.push(Arc::new(Sphere {
        centre: Vec3 {
            x: 0.0,
            y: 0.0,
            z: -1.0,
        },
        radius: 0.5,
    }));
    WORLD.push(Arc::new(Sphere {
        centre: Vec3 {
            x: 0.0,
            y: -100.5,
            z: -1.0,
        },
        radius: 100.0,
    }));

};
unsafe {
    if image_height < 1 {
        image_height = 1;
    }
    // Vector Deltas
    pixel_delta_u = viewport_u / image_width as f64 * aspect_ratio;
    pixel_delta_v = viewport_v / image_height as f64;
    //Calc loci of upper L pix
    viewport_upper_left = camera_centre
        - Vec3 {
            x: 0.0,
            y: 0.0,
            z: focal_length,
        }
        - viewport_u / 2.0 * aspect_ratio
        - viewport_v / 2.0;
    pixel00_loci = viewport_upper_left + 0.5 * (pixel_delta_u + pixel_delta_v);
}
//unsafe { print_image() };
unsafe fn print_image() {
    //let dim: i32 = 2560;

    let stdout = io::stdout();
    let mut hand_stdout = io::BufWriter::new(stdout);

    writeln!(hand_stdout, "P3\n{} {}\n255", image_width, image_height);

    for j in 0..image_height {
        //eprintln!("ScanLines remaining: {}", image_height - j - 1);
        for i in 0..image_width {
            let pixel_centre =
                pixel00_loci + (i as f64 * pixel_delta_u) + (j as f64 * pixel_delta_v);
            let ray_direction = (pixel_centre - camera_centre);
            let r: Ray = Ray {
                origin: camera_centre,
                direction: ray_direction,
            };
            //let pixel_colour: colour::Colour = ray_colour(&r, &WORLD);

            //colour::write_colour(&mut hand_stdout, pixel_colour)
        }
    }

    eprintln!("DONE!");
}
